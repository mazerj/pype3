# -*- Mode: Python; tab-width: 4; py-indent-offset: 4; -*-

"""Dynamic config files -- things to change on the fly

This isn't in use yet.

Author -- James A. Mazer (mazerj@gmail.com)

"""

import os
import sys
import posixpath
import stat

class DynamicConfig(object):
	def __init__(self, fname):
		self.timestamp = None
		self.fname = fname

		if os.sep in fname:
			# absolute or relative path, just open the file
			self.fname = fname
		else:
			# otherwise, it's just a basename --> look in home dir
			self.fname = os.path.join(os.path.expanduser('~'), fname)

	def _load(self):
		if not posixpath.exists(self.fname):
			self._config = {}
		else:
			mtime = os.stat(self.fname)[stat.ST_MTIME]
			if self.timestamp is None or mtime > self.timestamp:
				if not self.timestamp is None:
					sys.stderr.write('Warning: reloaded config "%s"\n' %
									 self.fname)
				self._config = {}
				for line in open(self.fname, 'r'):
					line = line.strip()
					if line and line[0] != "#" and line[-1] != "=":
						var,val = line.rsplit("=",1)
						self._config[var.strip()] = val.strip()
			self.timestamp = mtime

	def _unload(self):
		f = open(self.fname, 'w')
		f.write('# autogenerated -- do not edit\n')
		for k in self._config.keys():
			f.write('%s=%s\n' % (k, self._config[k]))
		f.close()

	def get(self, option, default=None):
		self._load()
		try:
			return self._config[option]
		except KeyError:
			return default

	def set(self, option, value, save=1):
		self._load()
		self._config[option] = value
		if save:
			self._unload()

